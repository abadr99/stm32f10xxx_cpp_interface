/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "Types.h"
#include "stm32f103xx.h"
#include "BitManipulation.h"
#include "Pin.h"
#include "Gpio.h"
#include "Rcc.h"
#include "Spi.h"
#include "Led.h"
#include "Systick.h"

using namespace stm32::type;
using namespace stm32::registers::rcc;
using namespace stm32::dev::mcal::pin;
using namespace stm32::dev::mcal::gpio;
using namespace stm32::dev::mcal::rcc;
using namespace stm32::dev::mcal::spi;
using namespace stm32::dev::mcal::systick;
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
    Rcc::InitSysClock();
    Rcc::SetExternalClock(kHseCrystal);
    Rcc::Enable(Peripheral::kIOPA);
    Rcc::Enable(Peripheral::kIOPC);
    Rcc::Enable(Peripheral::kSPI1);

    uint8_t txData = 0xAA;
    Pin SCK(kPortA, kPin5, PinMode::kAlternativePushPull_2MHz); // SCK
    Pin MOSI(kPortA, kPin7, PinMode::kAlternativePushPull_2MHz); // MOSI
    Pin MISO(kPortA, kPin6, PinMode::kInputFloat); // MISO
    Pin SS(kPortA, kPin4, PinMode::kAlternativePushPull_2MHz); // ss
    Pin led(kPortC, kPin13, PinMode::kOutputPushPull_10MHz);
    Pin buzzer(kPortA, kPin8, PinMode::kOutputPushPull_10MHz);


   Systick::Enable(kAHB_Div_8);
    SpiConfig spi1_config = {kSPI1, kSpi_8bit, kLSB, kMode0
                             , kSW, kF_DIV_4};
    Spi spi1(spi1_config);
    Gpio::Set(MOSI);
    Gpio::Set(MISO);
    Gpio::Set(SS);
    Gpio::Set(SCK);
    Gpio::Set(led);
    Gpio::Set(buzzer);
    Gpio::SetPinValue(led, kLow);
    Gpio::SetPinValue(buzzer, kLow);
    spi1.MasterInit();
	spi1.Write(txData);
    uint8_t msg = 0;
    msg = spi1.Read();
    if (msg == 0xAA) {
    	while(1) {
    	Gpio::SetPinValue(led, kHigh);
    	Gpio::SetPinValue(buzzer, kHigh);
    	Systick::Delay_ms(1000);
    	Gpio::SetPinValue(led, kLow);
    	Gpio::SetPinValue(buzzer, kLow);
    	Systick::Delay_ms(1000);
    	}
    }else {
    	Gpio::SetPinValue(led, kLow);
    	Gpio::SetPinValue(buzzer, kLow);
    }

    while (1) {


}
}
